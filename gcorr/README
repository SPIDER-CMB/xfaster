Code package for calculating gcorr factors using pre-generated simulation maps for each single mask.

In each folder, there are three scripts used for non-null/null gcorr runs:

1. xfaster_gcal_unconstr.py ---- A standard xfaster sample script to generate sim/ensemble_mean bandpower runs.
2. compute_gcorr.py  ---- A script that computes gcorr.npz file from all the bandpower.npz files.
3. gcal_iter_unconstr.py ---- A iteration script, that calls script 1 and 2 to get a new gcorr.npz file each time.

---------------------
Gcorr run procedure:
 
1. For both non-null/null gcorr runs, one first need to do one simulation run to get all XFaster output files with NO gcorr applied, stored to a default folder `xfaster_gcal_unconstr`. Check for your mask_type option. 
For nulls, if data bandpowers are pre-computed, a qb_file could be set to point to that bandpower file.
Could increase OMP_threads for this first run as it helps when computing the sim_xcorr file.

Example call, non-nulls
===========
$ python xfaster_gal_unconstr.py --no-gcorr
===========

2. Complete the remaining simulation runs.(setting -m for ensemble_mean run for non-nulls; -f and -n for sim indices) For non-nulls, a ensemble_mean run is required to compute a gcorr factor. For nulls, only simulation bandpowers are required.

===========
$ python xfaster_gcal_unconstr.py --no-gcorr -m     (ensemble_mean run)
$ python xfaster_gcal_unconstr.py --no-gcorr -n 100 (100 sim runs)
===========

3. Make a parallel copy of this output folder and name it `xfaster_gcal_unconstr_iter`. This is the folder where transfer functions and bandpowers will be iterated in. (Make sure this happens before step 4., so there's no gcorr file in this _iter folder.)

4. Run compute_gcorr.py once. This will generate a file `gcorr_<freq_tag>.npz` in the `xfaster_gcal_unconstr` folder. This is the initial/reference gcorr factor computed, and will NOT get updated in the iteration process.

===========
$ python compute_gcal.py 95
===========

5. Make a symlink in the mask folder called `mask_map_<freq_tag>_gcorr.npz` --> pointing to `gcorr_<freq>_iter.npz` in the `xfaster_gcal_unconstr` folder(reference folder.) It doesn't exist yet at this moment but will be generated in Step 6.

6. Run gcal_iter_unconstr.py. Every time you run it, the script will:

    0) Remove all transfer.npz and bandpower.npz in the `xfaster_gcal_unconstr_iter` folder
    1) Create/Update a `gcorr_<freq>_iter.npz` and `gcorr_<freq>_prev.npz` file in the `xfaster_gcal_unconstr` folder(reference folder)
    2) Submit ensemble_mean run(non_nulls) or simulation jobs for the `_iter` folder using the updated `gcorr_iter` in the reference folder as you've sim_linked it.
    3) Once the bandpower jobs are done, compute a new gcorr_correction `gcorr_<freq>.npz` in `_iter` folder.

7. Repeat running (null_)gcal_iter_unconstr.py until the printed gcorr_correction(in folder `_iter`) converged closer enough to 1.

8. Once bb/ee gcorrs are closer enough to 1, you can stop, and copy `gcal_iter.npz` in the `xfaster_gcal_unconstr` folder(reference folder) to the mask folder with proper names. (Eg: `mask_map_90_gcorr.npz`)

---------------------
Words to help you understand whats going on:

The gcorr.npz in the iter folder is the `correction` that gets apply (automatically) to the `gcorr_iter` in the 1st folder each time you run gcal_iter_unconstr.py. As the gcorr in the iter folder gets closer to 1, the `gcorr_iter` in the reference folder will get closer to the final answer. The finally converged `gcorr_iter.npz` in the reference folder is the one you should put in the mask file for a real data run.
